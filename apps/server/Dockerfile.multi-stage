# Stage 1: Configure the base image
# --------------------------------------------------
FROM node:20-alpine AS base
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable
    
# Stage 2: Configure the pruner image
# --------------------------------------------------
FROM base AS pruner
RUN apk update
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY . .
RUN pnpm install turbo --global
RUN turbo prune server --docker

# Stage 3: Configure the prod-deps image
# --------------------------------------------------
FROM base AS prod-deps
RUN apk update
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY --from=pruner /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=pruner /app/out/pnpm-workspace.yaml ./pnpm-workspace.yaml
COPY --from=pruner /app/out/json/ .
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile
RUN pnpm deploy --filter=server --prod /prod/server

# Stage 4: Configure the builder image
# --------------------------------------------------
FROM base AS builder
RUN apk update
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY --from=pruner /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=pruner /app/out/pnpm-workspace.yaml ./pnpm-workspace.yaml
COPY --from=pruner /app/out/full/ .
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile
RUN pnpm turbo build --filter=server

# Stage 5: Configure the runner image
# --------------------------------------------------
FROM node:20-slim AS runner
RUN npm install vite-node --global
WORKDIR /app
COPY --from=prod-deps /prod/server/node_modules ./node_modules
COPY --from=builder /app/apps/server/db/migrations ./db/migrations
COPY --from=builder /app/apps/server/scripts/migrate.mjs ./scripts/migrate.mjs
COPY --from=builder /app/apps/server/dist ./dist
COPY --from=builder /app/apps/server/scripts/startup.sh .
RUN chmod +x ./startup.sh
EXPOSE ${PORT}
CMD ["/bin/bash","-c","./startup.sh"]
